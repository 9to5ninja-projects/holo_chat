[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "lumina-memory"
version = "0.2.0-alpha"
description = "Advanced holographic memory system with XP Core mathematical foundation"
readme = "README.md"
authors = [{name = "9to5ninja", email = "9to5ninja@gmail.com"}]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["memory", "holographic", "ai", "machine-learning", "vector-database"]
requires-python = ">=3.10"
dependencies = [
    "numpy>=2.3.2",
    "scipy>=1.16.1",
    "scikit-learn>=1.7.1",
    "matplotlib>=3.10.5",
    "networkx>=3.4.2",
    "spacy>=3.8.7",
    "transformers>=4.55.0",
    "sentence-transformers>=5.1.0",
    "torch>=2.8.0",
    "faiss-cpu>=1.11.0",
    "pandas>=2.3.1",
    "joblib>=1.5.1",
    "cryptography>=45.0.6",
    "blake3>=1.0.5",
    "pydantic>=2.11.7",
    "tqdm>=4.67.1",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "hypothesis>=6.137.3",
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.17.1",
    "ruff>=0.12.8",
    "pre-commit>=4.3.0",
    "coverage>=7.10.3",
    "py-cpuinfo>=9.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=2.0.0",
]
notebook = [
    "jupyter>=1.1.1",
    "jupyterlab>=4.4.5",
    "ipywidgets>=8.1.7",
    "seaborn>=0.13.2",
    "plotly>=5.12.0",
]

[project.urls]
Homepage = "https://github.com/9to5ninja-projects/lumina-memory-system"
Repository = "https://github.com/9to5ninja-projects/lumina-memory-system"
Documentation = "https://github.com/9to5ninja-projects/lumina-memory-system/docs"
Issues = "https://github.com/9to5ninja-projects/lumina-memory-system/issues"

[project.scripts]
lumina-memory = "lumina_memory.cli:main"

[tool.setuptools]
packages = ["lumina_memory"]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
lumina_memory = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/*" = ["D", "S101"]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
markers = [
    "property: Property-based tests using Hypothesis",
    "integration: Integration tests requiring full system",
    "slow: Tests that take significant time to run",
    "benchmark: Performance benchmark tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
