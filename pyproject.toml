[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lumina-memory"
version = "0.3.0"
description = "XP Core Universal Memory Currency with Holographic Shape Intelligence"
authors = [
    {name = "9to5ninja Projects", email = "contact@9to5ninja.dev"}
]
license = {text = "MIT"}
readme = "README.md"
keywords = ["memory", "holographic", "xp-core", "ai", "lexical-attribution"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"

# Core dependencies - minimal for basic functionality
dependencies = [
    "numpy>=1.24.0",
    "blake3>=0.3.0",
]

[project.optional-dependencies]
# Fast lexical attribution
lexical = [
    "spacy>=3.6.0",
]

# Advanced ML features
ml = [
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    "transformers>=4.30.0",
]

# Database support
database = [
    "psycopg2-binary>=2.9.0",
    "redis>=4.5.0",
    "sqlalchemy>=2.0.0",
]

# Web API
api = [
    "fastapi>=0.100.0",
    "uvicorn>=0.22.0",
    "pydantic>=2.0.0",
]

# Full installation
full = [
    "lumina-memory[lexical,ml,database,api]",
]

# Development tools
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/9to5ninja-projects/lumina-memory-system"
Documentation = "https://lumina-memory.readthedocs.io"
Repository = "https://github.com/9to5ninja-projects/lumina-memory-system"
Issues = "https://github.com/9to5ninja-projects/lumina-memory-system/issues"
Changelog = "https://github.com/9to5ninja-projects/lumina-memory-system/blob/main/CHANGELOG.md"

[project.scripts]
lumina-memory = "lumina_memory.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'

# Ruff linting
[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/*" = ["B011"]

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=lumina_memory",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "property: marks tests as property-based tests",
]

[tool.coverage.run]
source = ["src/lumina_memory"]
omit = ["tests/*", "src/lumina_memory/__version__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\(Protocol\):",
    "@(abc\.)?abstractmethod",
]
